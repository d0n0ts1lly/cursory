import ttkbootstrap as tb
from ttkbootstrap.constants import *
from tkinter import ttk, messagebox
from mysql.connector import Error
from views.components.dialogs import ModernCRUDDialog
from config.database import DatabaseManager

class AdminCRUDView:
    """CRUD –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–ª—è –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏"""
    
    def __init__(self, parent, connection):
        self.parent = parent
        self.conn = connection
        self.db_manager = DatabaseManager(connection)
    
    def open_table(self, table):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–¥–º–∏–Ω–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é CRUD"""
        if not (self.conn and self.conn.is_connected()):
            messagebox.showwarning("–ü–æ–º–∏–ª–∫–∞", "–ù–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î")
            return

        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ
        try:
            cur = self.conn.cursor()
            cur.execute(f"SELECT * FROM `{table}` LIMIT 100")
            rows = cur.fetchall()
            cols = [description[0] for description in cur.description]
            cur.close()
        except Error as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞ –ë–î", f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–∞–±–ª–∏—Ü—ñ {table}: {str(e)}")
            return

        # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ
        win = tb.Toplevel(self.parent)
        win.title(f"–ê–¥–º—ñ–Ω: {table}")
        win.geometry("1200x700")

        # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = tb.Frame(win)
        main_frame.pack(fill="both", expand=True, padx=10, pady=10)

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        tb.Label(main_frame, text=f"–¢–∞–±–ª–∏—Ü—è: {table}", 
                font=("Segoe UI", 16, "bold")).pack(pady=(0, 10))

        # –§—Ä–µ–π–º —Å Treeview –∏ —Å–∫—Ä–æ–ª–ª–±–∞—Ä–∞–º–∏
        tree_frame = tb.Frame(main_frame)
        tree_frame.pack(fill="both", expand=True, pady=5)

        # –°–æ–∑–¥–∞–µ–º Treeview
        tree = ttk.Treeview(tree_frame, columns=cols, show="headings", height=20)
        
        # –°–∫—Ä–æ–ª–ª–±–∞—Ä—ã
        vsb = ttk.Scrollbar(tree_frame, orient="vertical", command=tree.yview)
        hsb = ttk.Scrollbar(tree_frame, orient="horizontal", command=tree.xview)
        tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)

        # –†–∞–∑–º–µ—â–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã
        tree.grid(row=0, column=0, sticky="nsew")
        vsb.grid(row=0, column=1, sticky="ns")
        hsb.grid(row=1, column=0, sticky="ew")
        
        tree_frame.grid_rowconfigure(0, weight=1)
        tree_frame.grid_columnconfigure(0, weight=1)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–ª–æ–Ω–æ–∫
        for col in cols:
            tree.heading(col, text=col)
            tree.column(col, width=120, minwidth=80, anchor="w")

        # –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        for i, row in enumerate(rows):
            tree.insert("", "end", values=row, tags=('even',) if i % 2 == 0 else ('odd',))

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ü–≤–µ—Ç–æ–≤ —Å—Ç—Ä–æ–∫
        tree.tag_configure('odd', background='#f8f9fa')
        tree.tag_configure('even', background='#ffffff')

        # –§—Ä–µ–π–º —Å –∫–Ω–æ–ø–∫–∞–º–∏
        btn_frame = tb.Frame(main_frame)
        btn_frame.pack(fill="x", pady=10)

        def refresh_table():
            """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã"""
            try:
                tree.delete(*tree.get_children())
                cur = self.conn.cursor()
                cur.execute(f"SELECT * FROM `{table}` LIMIT 100")
                rows = cur.fetchall()
                for i, row in enumerate(rows):
                    tree.insert("", "end", values=row, tags=('even',) if i % 2 == 0 else ('odd',))
                cur.close()
                messagebox.showinfo("–û–Ω–æ–≤–ª–µ–Ω–æ", "–¢–∞–±–ª–∏—Ü—é –æ–Ω–æ–≤–ª–µ–Ω–æ")
            except Error as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {str(e)}")

        def add_record():
            def save_data(data, mode):
                try:
                    cur = self.conn.cursor()
                    columns = ', '.join([f"`{k}`" for k in data.keys()])
                    placeholders = ', '.join(['%s'] * len(data))
                    sql = f"INSERT INTO `{table}` ({columns}) VALUES ({placeholders})"
                    cur.execute(sql, tuple(data.values()))
                    self.conn.commit()
                    cur.close()
                    messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
                    refresh_table()
                except Error as e:
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –¥–æ–¥–∞–≤–∞–Ω–Ω—è: {str(e)}")

            ModernCRUDDialog(self.parent, f"–î–æ–¥–∞—Ç–∏ –∑–∞–ø–∏—Å —É {table}", table, "add", on_save=save_data)

        def edit_record():
            selected = tree.selection()
            if not selected:
                messagebox.showwarning("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å —Ä—è–¥–æ–∫ –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è")
                return
            
            pk = self.db_manager.get_primary_key(table)
            if not pk:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á")
                return
            
            item = tree.item(selected[0])
            values = item["values"]
            pk_index = cols.index(pk)
            pk_value = values[pk_index]

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            data = {}
            for i, col in enumerate(cols):
                data[col] = values[i] if i < len(values) else ""

            def save_data(updated_data, mode):
                try:
                    cur = self.conn.cursor()
                    set_clause = ', '.join([f"`{k}`=%s" for k in updated_data.keys()])
                    sql = f"UPDATE `{table}` SET {set_clause} WHERE `{pk}`=%s"
                    values_list = list(updated_data.values())
                    values_list.append(pk_value)
                    cur.execute(sql, tuple(values_list))
                    self.conn.commit()
                    cur.close()
                    messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ó–∞–ø–∏—Å —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ!")
                    refresh_table()
                except Error as e:
                    messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è: {str(e)}")

            ModernCRUDDialog(self.parent, f"–†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∑–∞–ø–∏—Å —É {table}", table, "edit", data, on_save=save_data)

        def delete_record():
            selected = tree.selection()
            if not selected:
                messagebox.showwarning("–ü–æ–º–∏–ª–∫–∞", "–û–±–µ—Ä—ñ—Ç—å —Ä—è–¥–∫–∏ –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
                return
            
            pk = self.db_manager.get_primary_key(table)
            if not pk:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", "–ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø–µ—Ä–≤–∏–Ω–Ω–∏–π –∫–ª—é—á")
                return
            
            if not messagebox.askyesno("–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", 
                                     f"–í–∏–¥–∞–ª–∏—Ç–∏ {len(selected)} –æ–±—Ä–∞–Ω–∏—Ö –∑–∞–ø–∏—Å—ñ–≤?"):
                return
            
            try:
                cur = self.conn.cursor()
                for item in selected:
                    vals = tree.item(item)["values"]
                    pk_index = tree["columns"].index(pk)
                    pk_value = vals[pk_index]
                    cur.execute(f"DELETE FROM `{table}` WHERE `{pk}`=%s", (pk_value,))
                
                self.conn.commit()
                cur.close()
                
                messagebox.showinfo("–£—Å–ø—ñ—Ö", "–ó–∞–ø–∏—Å–∏ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ!")
                refresh_table()
                
            except Error as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–¥–∞–ª–µ–Ω–Ω—è: {str(e)}")

        def show_table_stats():
            """–ü–æ–∫–∞–∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —Ç–∞–±–ª–∏—Ü–µ"""
            try:
                cur = self.conn.cursor()
                cur.execute(f"SELECT COUNT(*) as total FROM `{table}`")
                total = cur.fetchone()[0]
                cur.close()
                
                messagebox.showinfo("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", 
                                  f"–¢–∞–±–ª–∏—Ü—è: {table}\n"
                                  f"–í—Å—å–æ–≥–æ –∑–∞–ø–∏—Å—ñ–≤: {total}")
            except Error as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        tb.Button(btn_frame, text="üîÑ –û–Ω–æ–≤–∏—Ç–∏", bootstyle="info",
                 command=refresh_table).pack(side="left", padx=5)
        tb.Button(btn_frame, text="‚ûï –î–æ–¥–∞—Ç–∏", bootstyle="success",
                 command=add_record).pack(side="left", padx=5)
        tb.Button(btn_frame, text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", bootstyle="warning",
                 command=edit_record).pack(side="left", padx=5)
        tb.Button(btn_frame, text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", bootstyle="danger",
                 command=delete_record).pack(side="left", padx=5)
        tb.Button(btn_frame, text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", bootstyle="secondary",
                 command=show_table_stats).pack(side="left", padx=5)
        tb.Button(btn_frame, text="–ó–∞–∫—Ä–∏—Ç–∏", bootstyle="dark",
                 command=win.destroy).pack(side="right", padx=5)