import ttkbootstrap as tb
from ttkbootstrap.constants import *
from tkinter import messagebox
from PIL import Image, ImageTk
import os

from config.settings import Config
from core.auth import AuthManager
from views.login import LoginView
from views.admin.dashboard import AdminDashboard
from views.admin.crud import AdminCRUDView
from views.user.dashboard import UserDashboard
from views.user.cars import CarManager
from views.components.map import MapManager
from utils.image_processing import load_image_safe, create_round_avatar
from mysql.connector import Error

class EnhancedAutoTrackerApp(tb.Window):
    def __init__(self):
        super().__init__(themename=Config.DEFAULT_THEME)
        self.title("Auto Tracker Pro ‚Äî Advanced Vehicle Tracking")
        self.geometry(f"{Config.WINDOW_WIDTH}x{Config.WINDOW_HEIGHT}")
        self.minsize(Config.MIN_WINDOW_WIDTH, Config.MIN_WINDOW_HEIGHT)

        self.auth_manager = AuthManager()
        self.conn = None
        self.current_user = None
        self.dark_mode = False

        # UI containers
        self.left_frame = None
        self.center_frame = None
        self.right_frame = None

        # Managers
        self.map_manager = None
        self.admin_crud = None
        self.car_manager = None
        
        # UI widgets
        self.cars_list = None
        self.map_canvas = None

        # Data caches
        self.user_cars = []
        self.notifications = []

        # Current views
        self.current_admin_dashboard = None
        self.current_user_dashboard = None

        # Build login-first UI
        self._build_login_ui()

    def _build_login_ui(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ UI –≤—Ö–æ–¥–∞"""
        self.login_view = LoginView(self, self.auth_manager, self._on_login_success)

    def _on_login_success(self, user, connection):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—Ö–æ–¥–∞"""
        self.current_user = user
        self.conn = connection
        self.map_manager = MapManager(self, self.conn)
        self.admin_crud = AdminCRUDView(self, self.conn)
        self.car_manager = CarManager(self, self.conn, self.current_user)
        
        self._load_notifications()
        self._build_main_ui()

    def _build_main_ui(self):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ UI"""
        for w in self.winfo_children():
            w.destroy()

        self._create_top_bar()
        self._create_main_content()

    def _create_top_bar(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤–µ—Ä—Ö–Ω—é—é –ø–∞–Ω–µ–ª—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
        topbar = tb.Frame(self, bootstyle="dark")
        topbar.pack(fill="x", padx=0, pady=0)

        # Left side - app info
        left_info = tb.Frame(topbar, bootstyle="dark")
        left_info.pack(side="left", padx=15, pady=8)
        
        tb.Label(left_info, text="üöó Auto Tracker Pro", font=("Segoe UI", 14, "bold"), 
                bootstyle="inverse-dark").pack(side="left")
        
        # Center - user info
        user_info = tb.Frame(topbar, bootstyle="dark")
        user_info.pack(side="left", padx=20, pady=8)
        
        tb.Label(user_info, text=f"–í—ñ—Ç–∞—î–º–æ, {self.current_user['username']}", 
                font=("Segoe UI", 11, "bold"), bootstyle="inverse-dark").pack(side="left")
        tb.Label(user_info, text=f"‚Ä¢ –†–æ–ª—å: {self.current_user['role']}", 
                bootstyle="inverse-dark").pack(side="left", padx=10)

        # Right side - controls
        controls = tb.Frame(topbar, bootstyle="dark")
        controls.pack(side="right", padx=15, pady=8)

        # Notifications button with badge
        notification_btn = tb.Button(controls, text="üîî", bootstyle="dark-outline",
                                   command=self._show_notifications)
        notification_btn.pack(side="left", padx=5)
        
        # Theme toggle
        theme_btn = tb.Button(controls, text="üåô", bootstyle="dark-outline",
                            command=self._toggle_theme)
        theme_btn.pack(side="left", padx=5)
        
        # Logout button
        logout_btn = tb.Button(controls, text="–í–∏–π—Ç–∏", bootstyle="danger-outline",
                             command=self._logout)
        logout_btn.pack(side="left", padx=5)

    def _create_main_content(self):
        """–°–æ–∑–¥–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–æ–ª–∏"""
        main_container = tb.Frame(self)
        main_container.pack(fill="both", expand=True, padx=10, pady=10)

        if self.current_user["role"] == "admin":
            self._build_admin_dashboard(main_container)
        else:
            self._build_user_dashboard(main_container)

    def _build_admin_dashboard(self, parent):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏"""
        self.current_admin_dashboard = AdminDashboard(parent, self.conn, self.current_user)
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.current_admin_dashboard._admin_navigate = self._admin_navigate
        self.current_admin_dashboard._admin_open_table = self._admin_open_table
        self.current_admin_dashboard._show_analytics = self._show_analytics

    def _build_user_dashboard(self, parent):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏"""
        self.current_user_dashboard = UserDashboard(parent, self.conn, self.current_user)
        
        # –ü–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –º–µ—Ç–æ–¥—ã
        self.current_user_dashboard._add_new_car = self._add_new_car
        self.current_user_dashboard._show_detailed_info = self._show_detailed_info
        self.current_user_dashboard._export_my_data = self._export_my_data
        
        # –°–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç—É
        self.map_canvas = self.map_manager.create_map_canvas(self.current_user_dashboard.map_container)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º callback –¥–ª—è –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è
        self.current_user_dashboard.parent.on_car_select = self._on_car_select

    # ------------------ ADMIN METHODS ------------------
    def _admin_navigate(self, destination):
        """–ù–∞–≤–∏–≥–∞—Ü–∏—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
        for w in self.current_admin_dashboard.center_frame.winfo_children():
            w.destroy()

        if destination == "dashboard":
            self.current_admin_dashboard._build_admin_main()
        elif destination == "analytics":
            self._show_analytics()
        elif destination == "map_management":
            self._show_map_management()
        else:
            self._admin_open_table(destination)

    def _admin_open_table(self, table):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –∞–¥–º–∏–Ω–∞"""
        self.admin_crud.open_table(table)

    def _show_analytics(self):
        """–ü–æ–∫–∞–∑ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏"""
        analytics_frame = tb.Frame(self.current_admin_dashboard.center_frame)
        analytics_frame.pack(fill="both", expand=True, padx=20, pady=20)

        tb.Label(analytics_frame, text="üìä –ê–Ω–∞–ª—ñ—Ç–∏–∫–∞ —Ç–∞ –∑–≤—ñ—Ç–∏", 
                font=("Segoe UI", 18, "bold")).pack(pady=10)

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º –¥–æ—Å—Ç–∞–≤–∫–∏
        try:
            cur = self.conn.cursor()
            cur.execute("""
                SELECT ds.status_name, COUNT(p.purchase_id) as count
                FROM delivery_status ds
                LEFT JOIN purchases p ON ds.status_id = p.delivery_status_id
                GROUP BY ds.status_id, ds.status_name
                ORDER BY ds.order_index
            """)
            status_stats = cur.fetchall()
            cur.close()

            stats_frame = tb.Frame(analytics_frame)
            stats_frame.pack(fill="x", pady=10)

            for status_name, count in status_stats:
                row = tb.Frame(stats_frame)
                row.pack(fill="x", pady=2)
                tb.Label(row, text=status_name, width=20, anchor="w").pack(side="left")
                progress = tb.Progressbar(row, value=count, maximum=max(10, count*2), bootstyle="success")
                progress.pack(side="left", fill="x", expand=True, padx=5)
                tb.Label(row, text=str(count)).pack(side="right")

        except Error as e:
            tb.Label(analytics_frame, text=f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ—Ç–∏–∫–∏: {e}").pack()

        # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_frame = tb.Frame(analytics_frame)
        export_frame.pack(fill="x", pady=20)

        tb.Button(export_frame, text="üìÑ –ï–∫—Å–ø–æ—Ä—Ç –≤ CSV", bootstyle="success",
                 command=self._export_to_csv).pack(side="left", padx=5)
        tb.Button(export_frame, text="üìä –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∑–≤—ñ—Ç", bootstyle="info",
                 command=self._generate_report).pack(side="left", padx=5)

    def _show_map_management(self):
        """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ–π –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏"""
        map_frame = tb.Frame(self.current_admin_dashboard.center_frame)
        map_frame.pack(fill="both", expand=True, padx=20, pady=20)

        tb.Label(map_frame, text="üó∫Ô∏è –£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞—Ä—Ç–æ—é —Ç–∞ –º–∞—Ä—à—Ä—É—Ç–∞–º–∏", 
                font=("Segoe UI", 18, "bold")).pack(pady=10)

        # –ö–∞—Ä—Ç–∞
        map_container = tb.Frame(map_frame)
        map_container.pack(fill="both", expand=True, pady=10)

        self.map_manager.create_map_canvas(map_container)

        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∞–º–∏
        points_frame = tb.Frame(map_frame)
        points_frame.pack(fill="x", pady=10)

        tb.Button(points_frame, text="‚ûï –î–æ–¥–∞—Ç–∏ —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç—É", bootstyle="success",
                 command=self._add_route_point).pack(side="left", padx=5)
        tb.Button(points_frame, text="üìã –í—Å—ñ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç—É", bootstyle="info",
                 command=lambda: self._admin_open_table("delivery_route_points")).pack(side="left", padx=5)

    def _add_route_point(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–æ—á–∫–∏ –º–∞—Ä—à—Ä—É—Ç–∞"""
        def save_point(data, mode):
            try:
                cur = self.conn.cursor()
                if mode == "add":
                    columns = ', '.join([f"`{k}`" for k in data.keys()])
                    placeholders = ', '.join(['%s'] * len(data))
                    sql = f"INSERT INTO delivery_route_points ({columns}) VALUES ({placeholders})"
                    cur.execute(sql, tuple(data.values()))
                self.conn.commit()
                cur.close()
                messagebox.showinfo("–£—Å–ø—ñ—Ö", "–¢–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç—É —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ!")
            except Error as e:
                messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è: {str(e)}")

        from views.components.dialogs import ModernCRUDDialog
        ModernCRUDDialog(self, "–î–æ–¥–∞—Ç–∏ —Ç–æ—á–∫—É –º–∞—Ä—à—Ä—É—Ç—É", "delivery_route_points", 
                        "add", on_save=save_point)

    # ------------------ USER METHODS ------------------
    def _on_car_select(self, purchase):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        if self.current_user_dashboard:
            self.current_user_dashboard.update_car_info(purchase)
            self._show_car_details(purchase)

    def _show_car_details(self, purchase):
        """–ü–æ–∫–∞–∑ –¥–µ—Ç–∞–ª–µ–π –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        img = self._load_main_image_for_purchase(purchase["purchase_id"])
        self._set_car_image(img)

        # –°—Ç—Ä–æ–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —à–∫–∞–ª—É
        self._build_timeline(purchase)

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞—Ä—Ç—É
        self._redraw_map(purchase)

    def _set_car_image(self, pil_img):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        max_w, max_h = 200, 150
        img = pil_img.copy()
        img.thumbnail((max_w, max_h), Image.LANCZOS)
        self.car_img_tk = ImageTk.PhotoImage(img)
        
        # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–ª–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∫—Ä–∞—Å–æ—Ç—ã
        round_img = create_round_avatar(pil_img, (120, 120))
        self.car_round_tk = ImageTk.PhotoImage(round_img)
        
        if self.current_user_dashboard and hasattr(self.current_user_dashboard, 'car_image_lbl'):
            self.current_user_dashboard.car_image_lbl.configure(image=self.car_round_tk)

    def _build_timeline(self, purchase):
        """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π —à–∫–∞–ª—ã —Å—Ç–∞—Ç—É—Å–æ–≤"""
        if not self.current_user_dashboard:
            return
            
        for w in self.current_user_dashboard.timeline_frame.winfo_children():
            w.destroy()

        try:
            cur = self.conn.cursor(dictionary=True)
            cur.execute("SELECT * FROM delivery_status ORDER BY order_index")
            statuses = cur.fetchall() or []
            cur.close()
        except:
            statuses = []

        cur_status_id = purchase.get("delivery_status_id")
        timeline_row = tb.Frame(self.current_user_dashboard.timeline_frame)
        timeline_row.pack(fill="x", padx=10, pady=5)

        for s in statuses:
            sid = s["status_id"]
            name = s["status_name"]
            
            if cur_status_id is not None and s["order_index"] < (self._get_order_index(cur_status_id) or 0):
                style = "success"
            elif cur_status_id is not None and s["order_index"] == (self._get_order_index(cur_status_id) or 0):
                style = "warning"
            else:
                style = "secondary"

            status_frame = tb.Frame(timeline_row, padding=5)
            status_frame.pack(side="left", expand=True)
            
            tb.Label(status_frame, text=name, font=("Segoe UI", 9), 
                    bootstyle=style).pack()
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å—Ç–∞—Ç—É—Å–∞
            indicator = tb.Frame(status_frame, width=20, height=20)
            indicator.pack(pady=2)
            indicator.configure(bootstyle=style)

    def _redraw_map(self, purchase):
        """–ü–µ—Ä–µ—Ä–∏—Å–æ–≤–∫–∞ –∫–∞—Ä—Ç—ã —Å –º–∞—Ä—à—Ä—É—Ç–æ–º"""
        if not self.map_manager:
            return

        self.map_manager.clear_map()

        if not purchase:
            return

        # –†–∏—Å—É–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∞–≤—Ç–æ
        self.map_manager.draw_car_route(purchase["purchase_id"])

    def _add_new_car(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∞–≤—Ç–æ–º–æ–±–∏–ª—è"""
        if self.car_manager:
            self.car_manager.add_new_car(self._load_user_cars)

    def _show_detailed_info(self):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º –∞–≤—Ç–æ"""
        if not self.current_user_dashboard or not self.current_user_dashboard.cars_list:
            return
            
        sel = self.current_user_dashboard.cars_list.selection()
        if not sel:
            messagebox.showwarning("–£–≤–∞–≥–∞", "–û–±–µ—Ä—ñ—Ç—å –∞–≤—Ç–æ –∑—ñ —Å–ø–∏—Å–∫—É")
            return

        purchase_id = int(sel[0])
        purchase = next((p for p in self.current_user_dashboard.user_cars if p["purchase_id"] == purchase_id), None)
        if not purchase:
            return

        if self.car_manager:
            self.car_manager.show_detailed_info(purchase)

    def _export_my_data(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.car_manager:
            self.car_manager.export_user_data(self.current_user['id'])

    # ------------------ UTILITY METHODS ------------------
    def _load_user_cars(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if self.current_user_dashboard:
            self.current_user_dashboard._load_user_cars()

    def _load_main_image_for_purchase(self, purchase_id):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –ø–æ–∫—É–ø–∫–∏"""
        return load_image_safe(Config.DEFAULT_CAR)

    def _get_order_index(self, status_id):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Ä—è–¥–∫–∞ —Å—Ç–∞—Ç—É—Å–∞"""
        try:
            cur = self.conn.cursor()
            cur.execute("SELECT order_index FROM delivery_status WHERE status_id=%s", (status_id,))
            r = cur.fetchone()
            cur.close()
            return r[0] if r else None
        except:
            return None

    def _load_notifications(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            cur = self.conn.cursor(dictionary=True)
            cur.execute("""
                SELECT * FROM notifications 
                WHERE user_id = %s AND is_read = FALSE
                ORDER BY created_at DESC
                LIMIT 10
            """, (self.current_user['id'],))
            self.notifications = cur.fetchall()
            cur.close()
        except:
            self.notifications = []

    def _show_notifications(self):
        """–ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not self.notifications:
            messagebox.showinfo("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è", "–ù–µ–º–∞—î –Ω–æ–≤–∏—Ö —Å–ø–æ–≤—ñ—â–µ–Ω—å")
            return

        win = tb.Toplevel(self)
        win.title("–°–ø–æ–≤—ñ—â–µ–Ω–Ω—è")
        win.geometry("400x500")

        for notification in self.notifications:
            frame = tb.Frame(win, padding=10)
            frame.pack(fill="x", padx=10, pady=5)

            tb.Label(frame, text=notification['title'], 
                    font=("Segoe UI", 11, "bold")).pack(anchor="w")
            tb.Label(frame, text=notification['message'], 
                    font=("Segoe UI", 10)).pack(anchor="w")
            tb.Label(frame, text=notification['created_at'].strftime("%d.%m.%Y %H:%M"),
                    font=("Segoe UI", 9), bootstyle="secondary").pack(anchor="w")

    def _toggle_theme(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã"""
        self.dark_mode = not self.dark_mode
        if self.dark_mode:
            self.style.theme_use(Config.DARK_THEME)
        else:
            self.style.theme_use(Config.DEFAULT_THEME)

    def _export_to_csv(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤ CSV"""
        from utils.helpers import export_to_csv
        export_to_csv(self.conn, "SELECT * FROM purchases", "purchases_export.csv")

    def _generate_report(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞"""
        try:
            cur = self.conn.cursor()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
            cur.execute("""
                SELECT DATE_FORMAT(purchase_date, '%Y-%m') as month, 
                       COUNT(*) as count
                FROM purchases 
                GROUP BY month 
                ORDER BY month DESC 
                LIMIT 6
            """)
            monthly_stats = cur.fetchall()
            
            report = "üìà –ó–≤—ñ—Ç –ø–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º\n\n"
            report += "–û—Å—Ç–∞–Ω–Ω—ñ 6 –º—ñ—Å—è—Ü—ñ–≤:\n"
            for month, count in monthly_stats:
                report += f"{month}: {count} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω—å\n"
            
            cur.close()
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç—á–µ—Ç –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
            self._show_text_dialog("–ó–≤—ñ—Ç –ø–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è–º", report)
            
        except Error as e:
            messagebox.showerror("–ü–æ–º–∏–ª–∫–∞", f"–ü–æ–º–∏–ª–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –∑–≤—ñ—Ç—É: {e}")

    def _show_text_dialog(self, title, text):
        """–ü–æ–∫–∞–∑ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
        win = tb.Toplevel(self)
        win.title(title)
        win.geometry("500x400")
        
        text_widget = tb.Text(win, wrap="word", padx=10, pady=10)
        text_widget.pack(fill="both", expand=True, padx=10, pady=10)
        text_widget.insert("1.0", text)
        text_widget.config(state="disabled")
        
        tb.Button(win, text="–ó–∞–∫—Ä–∏—Ç–∏", command=win.destroy).pack(pady=10)

    def _logout(self):
        """–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã"""
        self.auth_manager.logout()
        self.current_user = None
        self.conn = None
        self._build_login_ui()